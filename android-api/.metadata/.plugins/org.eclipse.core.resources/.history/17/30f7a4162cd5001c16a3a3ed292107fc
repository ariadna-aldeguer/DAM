package com.example.demo.rest;

import java.sql.Date;
import java.util.Calendar;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.example.demo.dao.PresenciasDAO;
import com.example.demo.models.Presencia;

@RestController
@RequestMapping("/")  
public class ControllerRest {

	@Autowired 
 	private PresenciasDAO presenciasDAO;
	
	@PostMapping   
	public ResponseEntity<Presencia> crearPresencia(String name, double latitud, double longitud) { 
		
		double latAustria = 41.41694549369084; 
		double longAustria = 2.1989492153444297;
		String comentario = "";
		boolean esta_dentro= Math.acos(Math.sin(latAustria) * Math.sin(latitud) + 
				Math.cos(latAustria) * Math.cos(latitud) * Math.cos(longitud - (longAustria))) * 6371 <= 200;
		String fecha = new java.sql.Date(Calendar.getInstance().getTime().getTime()).toString();
		
		if (esta_dentro) 
			comentario="Esta dentro del radio. Ha fichado";
		else
			comentario="Esta fuera del radio. No ha fichado";
		
		Presencia presencia = new Presencia(name, latitud, longitud, comentario, fecha);
		Presencia newPre = presenciasDAO.save(presencia);
		return ResponseEntity.ok(newPre);

	}
	
	@GetMapping("")   
	public ResponseEntity<List<Presencia>> getPresencias() { 
		List<Presencia> presencias = presenciasDAO.findAll();
		return ResponseEntity.ok(presencias);
	}

	@GetMapping(value="{name}")    //{name}  (DELETE)
	public ResponseEntity<List<Presencia>> getPresenciasBy(@PathVariable("name") String name) { 
		List<Presencia> presencias = presenciasDAO.findByName(name);
		return ResponseEntity.ok(presencias);
	}
	
	
	

	/*@RequestMapping(value="{productId}")   //productos/{productId} --> productos/1   
	public ResponseEntity<Producto> getProductoById(@PathVariable("productId") Long productId) { 
		Optional<Producto> optionalProducto = productosDAO.findById(productId);
		if (optionalProducto.isPresent()) {
			return ResponseEntity.ok(optionalProducto.get());
		}else {
			return ResponseEntity.noContent().build();
		}
	}*/
	
}
